/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ControleCompra;
import controller.ControleFornecedor;
import controller.ControleCompraProduto;
import controller.ControleFornecedorProduto;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.ListIterator;
import javax.swing.JOptionPane;
import model.Compra;
import model.Fornecedor;
import model.CompraProduto;
import model.FornecedorProduto;
import model.Produto;
import util.FornecedorTableModel;
import util.CompraProdutoTableModel;
import util.FornecedorProdutoTableModel;

/**
 *
 * @author lucas
 */
public class RegistrarCompra extends javax.swing.JFrame {

    private Fornecedor fornecedor;
    private String fornecedorNome;
    private ControleFornecedor controleFor = new ControleFornecedor();
    private List<Fornecedor> listaFornecedor = controleFor.listarFornecedores("");
    private FornecedorTableModel modelFornecedor = new FornecedorTableModel(listaFornecedor);
    private Fornecedor f = new Fornecedor();
    
    private ControleFornecedorProduto controleFp = new ControleFornecedorProduto();
    private List<FornecedorProduto> listaProdutosF = controleFp.listarFP("");
    private List<FornecedorProduto> listaProdutosF2 = controleFp.listar2FP("","");
    private FornecedorProdutoTableModel modelFornecedorProduto = new FornecedorProdutoTableModel(listaProdutosF);
    
    private ArrayList<CompraProduto> listaCompra = new ArrayList<CompraProduto>();
    private ControleCompraProduto controleCP = new ControleCompraProduto();
    private CompraProdutoTableModel modelCP;
    
    private ControleCompra controleCompra = new ControleCompra();
    private Compra compra = new Compra();
    
    /**
     * Creates new form RealizarCompra
     */
    public RegistrarCompra() {
        initComponents();
        tabelaFornecedor.setModel(modelFornecedor);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaFornecedor = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        buscaFornecedor = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        RegistrarPedido = new javax.swing.JButton();
        Cancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProdutosF = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        RemoverProd = new javax.swing.JButton();
        totalTxt = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaProdutosComprados = new javax.swing.JTable();
        AdicionarProd = new javax.swing.JButton();
        qtdProduto = new javax.swing.JSpinner();
        ConfirmarFor = new javax.swing.JButton();
        qtdRemover = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("REGISTRAR PEDIDO(COMPRA)");

        tabelaFornecedor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabelaFornecedor);

        jLabel4.setText("Fornecedor:");

        buscaFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaFornecedorActionPerformed(evt);
            }
        });
        buscaFornecedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                buscaFornecedorKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("LISTA DE PRODUTOS DO FORNECEDOR:");

        RegistrarPedido.setText("REGISTRAR PEDIDO");
        RegistrarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrarPedidoActionPerformed(evt);
            }
        });

        Cancelar.setText("CANCELAR COMPRA");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        tabelaProdutosF.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabelaProdutosF);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("TOTAL:");

        RemoverProd.setText("REMOVER PRODUTO");
        RemoverProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoverProdActionPerformed(evt);
            }
        });

        totalTxt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        totalTxt.setText("R$ 0,00");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("LISTA DE PRODUTOS DA COMPRA");

        tabelaProdutosComprados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabelaProdutosComprados);

        AdicionarProd.setText("ADICIONAR PRODUTO");
        AdicionarProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarProdActionPerformed(evt);
            }
        });

        ConfirmarFor.setText("CONFIRMAR FORNECEDOR");
        ConfirmarFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmarForActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(totalTxt))
                    .addComponent(RegistrarPedido))
                .addContainerGap(553, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buscaFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(32, 32, 32)
                                .addComponent(ConfirmarFor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel7))
                                            .addGap(207, 207, 207)))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(qtdProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(qtdRemover))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RemoverProd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AdicionarProd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(buscaFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfirmarFor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(qtdProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AdicionarProd, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(RemoverProd, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(qtdRemover, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(totalTxt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistrarPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        new Compras().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_CancelarActionPerformed

    private void RemoverProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoverProdActionPerformed
        int linhaSelecionada = tabelaProdutosComprados.getSelectedRow();
        CompraProduto cp = new CompraProduto();
        ListIterator listIt = this.listaCompra.listIterator();
        FornecedorProduto produtof = new FornecedorProduto();
        Produto produto;
        int posicao = 0;           //posicao onde sera re-inserido o objeto na lista

        if (linhaSelecionada >= 0) {                                            //verifica se algum produto foi selecionado
            if ((int) qtdRemover.getValue() > 0) {                              //verifica se a quantidade e positiva
                cp = this.modelCP.get(linhaSelecionada);
                produto = cp.getProduto();
                String fornecedor = this.compra.getFornecedor().getNome();
                String nomeProd = produto.getNome();
                listaProdutosF2 = controleFp.listar2FP(fornecedor,nomeProd);
                produtof = listaProdutosF2.get(0);
                cp.setProduto(produto);
                while (listIt.hasNext()) {                      //remove o produto da lista
                    posicao++;
                    CompraProduto cpIt = (CompraProduto) listIt.next();
                    if (cpIt == cp) {
                        posicao--;
                        listIt.remove();
                        break;
                    }
                }

                if ((int) qtdRemover.getValue() < cp.getQuantidade()) {        //se for verdadeiro adiciona com a quantidade calculada
                    cp.setQuantidade(cp.getQuantidade() - (int) qtdRemover.getValue());
                    cp.setCusto(cp.getCusto() - (int) qtdRemover.getValue() * produtof.getPreco());
                    listaCompra.add(posicao, cp);
                    produtof.getFornecedor();
                    this.compra.setTotal(this.compra.getTotal() - produtof.getPreco() * (int) qtdRemover.getValue());
                } else {
                    this.compra.setTotal(this.compra.getTotal() - produtof.getPreco() * cp.getQuantidade());
                }
                
                this.modelCP = new CompraProdutoTableModel(this.listaCompra);  //atualiza a tabela
                tabelaProdutosComprados.setModel(this.modelCP);
                
                totalTxt.setText("" + this.compra.getTotal());

            } else {
                JOptionPane.showMessageDialog(this, "A quantidade a ser removida deve ser superior a zero.", "Erro.", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um Produto.", "Erro: Nenhum Produto selecionado.", JOptionPane.ERROR_MESSAGE);
        }
        qtdRemover.setValue(0);
    }//GEN-LAST:event_RemoverProdActionPerformed

    private void RegistrarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrarPedidoActionPerformed
        if (this.compra.getTotal() <= 0){
            JOptionPane.showMessageDialog(this, "Compra " + this.compra.getId() + " não possui preço. Por isso não será cadastrada.", "Compra não cadastrada.", JOptionPane.INFORMATION_MESSAGE);
            new Compras().setVisible(true);
            this.dispose();
        }else{
            Date d = new Date();
            Calendar cal = new GregorianCalendar();
            cal.setTime(d);
            this.compra.setDataCompra(d);
            this.controleCompra.cadastrarCompra(this.compra);
                        
            controleCP.cadastrarCP(listaCompra);
            new Compras().setVisible(true);
            this.dispose();
        }
        
        
    }//GEN-LAST:event_RegistrarPedidoActionPerformed

    private void AdicionarProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarProdActionPerformed
        int linhaSelecionada = tabelaProdutosF.getSelectedRow();
        CompraProduto cp = new CompraProduto();
        FornecedorProduto produtof = new FornecedorProduto();
        Produto produto = new Produto();
        ListIterator listIt = this.listaCompra.listIterator();
        int posicao = 0;
        
        if (linhaSelecionada >= 0) {                                            //verifica se algum produto foi selecionado
            if ((int) qtdProduto.getValue() > 0) {                              //verifica se a quantidade e positiva
                    produtof = this.modelFornecedorProduto.get(linhaSelecionada);
                    produto = produtof.getProduto();
                    cp.setProduto(produto);
                    cp.setCompra(this.compra);
                    cp.setQuantidade((int) qtdProduto.getValue());
                    cp.setCusto((int) qtdProduto.getValue() * produtof.getPreco());
                    while (listIt.hasNext()) {
                        posicao++;
                        CompraProduto cpIt = (CompraProduto) listIt.next();
                        if (cpIt.getProduto().getId() == produto.getId()) {
                            posicao--;
                            cp.setQuantidade(cp.getQuantidade() + cpIt.getQuantidade());
                            cp.setCusto(cp.getCusto() + cpIt.getCusto());
                            compra.setTotal(compra.getTotal() - cpIt.getCusto());
                            listIt.remove();
                            break;
                        }
                    }
                                        
                    this.listaCompra.add(posicao, cp);                                //add na lista

                    this.modelCP = new CompraProdutoTableModel(this.listaCompra);  //atualiza a tabela
                    tabelaProdutosComprados.setModel(this.modelCP);
                    this.compra.setTotal(this.compra.getTotal() + cp.getCusto());  //atualiza o total
                    totalTxt.setText("" + this.compra.getTotal());

                
            } else {
                JOptionPane.showMessageDialog(this, "A quantidade do produto deve ser superior a zero.", "Erro.", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um Produto.", "Erro: Nenhum Produto selecionado.", JOptionPane.ERROR_MESSAGE);
        }
        qtdProduto.setValue(0);
    }//GEN-LAST:event_AdicionarProdActionPerformed

    private void buscaFornecedorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscaFornecedorKeyReleased
        this.fornecedorNome = buscaFornecedor.getText();
        this.listaFornecedor = controleFor.listarFornecedores(this.fornecedorNome);
        this.modelFornecedor = new FornecedorTableModel(this.listaFornecedor);
        tabelaFornecedor.setModel(this.modelFornecedor);
    }//GEN-LAST:event_buscaFornecedorKeyReleased

    private void buscaFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaFornecedorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscaFornecedorActionPerformed

    private void ConfirmarForActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmarForActionPerformed
        int linhaSelecionada = tabelaFornecedor.getSelectedRow();
        FornecedorProduto fornecedor = new FornecedorProduto();
        
        
        if (linhaSelecionada >= 0) { //Verifica se a linha do fornecedor foi selecionada
            String nome = (String) tabelaFornecedor.getValueAt(linhaSelecionada, 1);
            this.fornecedorNome = nome;
            this.listaProdutosF = controleFp.listarFP(this.fornecedorNome);
            this.modelFornecedorProduto = new FornecedorProdutoTableModel(this.listaProdutosF);
            tabelaProdutosF.setModel(this.modelFornecedorProduto);
            this.fornecedor = this.modelFornecedor.get(linhaSelecionada);
            this.compra.setFornecedor(this.fornecedor);
            JOptionPane.showMessageDialog(this, "Fornecedor " + this.fornecedor.getNome() + " selecionado.", "Fornecedor selecionado.", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um fornecedor.", "Erro: Nenhum fornecedor selecionado.", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_ConfirmarForActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarCompra().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdicionarProd;
    private javax.swing.JButton Cancelar;
    private javax.swing.JButton ConfirmarFor;
    private javax.swing.JButton RegistrarPedido;
    private javax.swing.JButton RemoverProd;
    private javax.swing.JTextField buscaFornecedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner qtdProduto;
    private javax.swing.JSpinner qtdRemover;
    private javax.swing.JTable tabelaFornecedor;
    private javax.swing.JTable tabelaProdutosComprados;
    private javax.swing.JTable tabelaProdutosF;
    private javax.swing.JLabel totalTxt;
    // End of variables declaration//GEN-END:variables
}
